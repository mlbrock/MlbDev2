// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
// MLB Utility Library Include File
// ////////////////////////////////////////////////////////////////////////////
/*
   File Name         :  Compare_timespec.hpp

   File Description  :  Compare functions for struct timespec.

   Revision History  :  2024-09-15 --- Added to MlbDev2 Utility library.
                           Michael L. Brock

      Copyright Michael L. Brock 2024.
      Distributed under the Boost Software License, Version 1.0.
      (See accompanying file LICENSE_1_0.txt or copy at
      http://www.boost.org/LICENSE_1_0.txt)

*/
// ////////////////////////////////////////////////////////////////////////////

#ifndef HH__MLB__Utility__Compare_timespec_hpp__HH

#define HH__MLB__Utility__Compare_timespec_hpp__HH   1

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
/**
   \file Compare_timespec.hpp

   \brief   The TimeSpec class definition include file.
*/
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
// Required include files...
// ////////////////////////////////////////////////////////////////////////////

#include <boost/config.hpp>

#if defined(BOOST_CXX_VERSION) && (BOOST_CXX_VERSION >= 201703L)
# include <compare>
#endif // #if defined(BOOST_CXX_VERSION) && (BOOST_CXX_VERSION >= 201703L)

#if defined(_MSC_VER)
# if (_MSC_VER < 1900)
struct timespec {
   time_t tv_sec;
   long   tv_nsec;
};
# endif // # if (_MSC_VER < 1900)
#else
# include <unistd.h>
#endif // # if defined(_MSC_VER)

// ////////////////////////////////////////////////////////////////////////////

#if defined(BOOST_CXX_VERSION) && (BOOST_CXX_VERSION >= 201703L)
// ////////////////////////////////////////////////////////////////////////////
constexpr auto operator <=> (const timespec &lhs, const timespec &rhs)
{                    
   std::weak_ordering cmp = lhs.tv_sec <=> rhs.tv_sec;

   return((cmp != std::weak_ordering::equivalent) ? cmp : (lhs.tv_nsec <=> rhs.tv_nsec));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
constexpr bool operator == (const timespec &lhs, const timespec &rhs)
{
   return((lhs.tv_sec == rhs.tv_sec) && (lhs.tv_nsec == rhs.tv_nsec));
}   
// ////////////////////////////////////////////////////////////////////////////
#else
// ////////////////////////////////////////////////////////////////////////////
constexpr int Compare(const timespec &lhs, const timespec &rhs)
{
	return(
		((int) (lhs.tv_sec  > rhs.tv_sec)  ?  1 :
				((lhs.tv_sec  < rhs.tv_sec)  ? -1 :
				((lhs.tv_nsec > rhs.tv_nsec) ?  1 :
				((lhs.tv_nsec < rhs.tv_nsec) ? -1 : 0)))));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
constexpr bool operator <  (const timespec &lhs, const timespec &rhs)
{
	return(Compare(lhs, rhs) <  0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
constexpr bool operator >  (const timespec &lhs, const timespec &rhs)
{
	return(Compare(lhs, rhs) >  0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
constexpr bool operator <= (const timespec &lhs, const timespec &rhs)
{
	return(Compare(lhs, rhs) <= 0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
constexpr bool operator >= (const timespec &lhs, const timespec &rhs)
{
	return(Compare(lhs, rhs) >= 0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
constexpr bool operator == (const timespec &lhs, const timespec &rhs)
{
	return(Compare(lhs, rhs) == 0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
constexpr bool operator != (const timespec &lhs, const timespec &rhs)
{
	return(Compare(lhs, rhs) != 0);
}
// ////////////////////////////////////////////////////////////////////////////
#endif // #if defined(BOOST_CXX_VERSION) && (BOOST_CXX_VERSION >= 201703L)

#endif // #ifndef HH__MLB__Utility__Compare_timespec_hpp__HH

