// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
// MLB NatsWrapper Library Module File
// ////////////////////////////////////////////////////////////////////////////
/*
   File Name         :  NatsMsg.cpp

   File Description  :  Implementation of the NatsMsg class.

   Revision History  :  2024-08-17 --- Creation.
                           Michael L. Brock

      Copyright Michael L. Brock 2024.
      Distributed under the Boost Software License, Version 1.0.
      (See accompanying file LICENSE_1_0.txt or copy at
      http://www.boost.org/LICENSE_1_0.txt)

*/
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
// Required include files...
// ////////////////////////////////////////////////////////////////////////////

#include <NatsWrapper/NatsMsg.hpp>

// ////////////////////////////////////////////////////////////////////////////

namespace MLB {

namespace NatsWrapper {

// ////////////////////////////////////////////////////////////////////////////
// PRIVATE: Accessible to NatsSubscription::NextMessage()
NatsMsg::NatsMsg(natsMsg *nats_msg)
	:nats_msg_sptr_()
{
	if (nats_msg)
		nats_msg_sptr_.reset(nats_msg, ::natsMsg_Destroy);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
NatsMsg::NatsMsg(NatsSubscription &nats_subs, int64_t time_out)
	:nats_msg_sptr_()
{
	natsMsg *nats_msg = NULL;

	NatsWrapper_THROW_IF_NOT_OK(::natsSubscription_NextMsg,
		(&nats_msg, nats_subs.GetPtr(), time_out))

	nats_msg_sptr_.reset(nats_msg, ::natsMsg_Destroy);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
NatsMsg::~NatsMsg()
{
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
const char *NatsMsg::GetSubject() const
{
	return(natsMsg_GetSubject(GetPtrChecked()));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
const char *NatsMsg::GetReply() const
{
	return(natsMsg_GetReply(GetPtrChecked()));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
const char *NatsMsg::GetData() const
{
	return(natsMsg_GetData(GetPtrChecked()));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
int NatsMsg::GetDataLength() const
{
	return(natsMsg_GetDataLength(GetPtrChecked()));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
bool NatsMsg::IsNoResponders() const
{
	GetPtrChecked();

	return(::natsMsg_IsNoResponders(nats_msg_sptr_.get()));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
natsMsg *NatsMsg::GetPtr()
{
	return(nats_msg_sptr_.get());
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
const natsMsg *NatsMsg::GetPtr() const
{
	return(nats_msg_sptr_.get());
}
// ////////////////////////////////////////////////////////////////////////////

namespace {

// ////////////////////////////////////////////////////////////////////////////
const natsMsg *GetPtrChecked_Helper(const natsMsg *nats_msg_ptr)
{
	if (!nats_msg_ptr)
		throw std::runtime_error("Attempt to make use of the underlying NATS "
			"message pointer, but it is NULL.");

	return(nats_msg_ptr);
}
// ////////////////////////////////////////////////////////////////////////////

} // Anonymous namespace

// ////////////////////////////////////////////////////////////////////////////
natsMsg *NatsMsg::GetPtrChecked()
{
	return(const_cast<natsMsg *>(GetPtrChecked_Helper(nats_msg_sptr_.get())));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
const natsMsg *NatsMsg::GetPtrChecked() const
{
	return(GetPtrChecked_Helper(nats_msg_sptr_.get()));
}
// ////////////////////////////////////////////////////////////////////////////

} // namespace NatsWrapper

} // namespace MLB

