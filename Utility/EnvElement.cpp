// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
// MLB Utility Library Module File
// ////////////////////////////////////////////////////////////////////////////
/*
   File Name         :  EnvElement.cpp

   File Description  :  Implementation of the EnvElement class.

   Revision History  :  1993-10-02 --- Creation
                           Michael L. Brock
                        2023-01-09 --- Migration to C++ MlbDev2/Utility.
                           Michael L. Brock

      Copyright Michael L. Brock 1993 - 2023.
      Distributed under the Boost Software License, Version 1.0.
      (See accompanying file LICENSE_1_0.txt or copy at
      http://www.boost.org/LICENSE_1_0.txt)

*/
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
// Required include files...
// ////////////////////////////////////////////////////////////////////////////

#include <Utility/EnvElement.hpp>

#include <Utility/StrICmp.hpp>

#include <ostream>

// ////////////////////////////////////////////////////////////////////////////

namespace MLB {

namespace Utility {

// ////////////////////////////////////////////////////////////////////////////
EnvElement::EnvElement()
	:env_name_()
	,env_value_()
{
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
EnvElement::EnvElement(const std::string &env_string)
	:env_name_(env_string, 0, GetEnvStringSeparatorIndex(env_string))
	,env_value_(env_string, GetEnvStringSeparatorIndex(env_string) + 1,
		std::string::npos)
{
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
EnvElement::EnvElement(const std::string &env_name,
	const std::string &env_value)
	:env_name_(env_name)
	,env_value_(env_value)
{
}
// ////////////////////////////////////////////////////////////////////////////

#if (!defined(BOOST_CXX_VERSION)) || (BOOST_CXX_VERSION < 201703L)
// ////////////////////////////////////////////////////////////////////////////
bool EnvElement::operator < (const EnvElement &other) const
{
	return(Utility_stricmp(env_name_.c_str(), other.env_name_.c_str()) < 0);
}
// ////////////////////////////////////////////////////////////////////////////
#endif // #if (!defined(BOOST_CXX_VERSION)) || (BOOST_CXX_VERSION < 201703L)

// ////////////////////////////////////////////////////////////////////////////
std::string &EnvElement::ToString(std::string &out_string) const
{
	out_string = env_name_ + "=" + env_value_;

	return(out_string);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
std::string EnvElement::ToString() const
{
	std::string out_string;

	return(ToString(out_string));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
std::ostream & operator << (std::ostream &o_str, const EnvElement &datum)
{
	o_str << datum.ToString();

	return(o_str);
}
// ////////////////////////////////////////////////////////////////////////////

} // namespace Utility

} // namespace MLB

