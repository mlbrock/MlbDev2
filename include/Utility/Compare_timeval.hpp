// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
// MLB Utility Library Include File
// ////////////////////////////////////////////////////////////////////////////
/*
   File Name         :  Compare_timeval.hpp

   File Description  :  Compare functions for struct timeval.

   Revision History  :  2024-09-15 --- Added to MlbDev2 Utility library.
                           Michael L. Brock

      Copyright Michael L. Brock 2024.
      Distributed under the Boost Software License, Version 1.0.
      (See accompanying file LICENSE_1_0.txt or copy at
      http://www.boost.org/LICENSE_1_0.txt)

*/
// ////////////////////////////////////////////////////////////////////////////

#ifndef HH__MLB__Utility__Compare_timeval_hpp__HH

#define HH__MLB__Utility__Compare_timeval_hpp__HH   1

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
/**
   \file Compare_timeval.hpp

   \brief   The TimeSpec class definition include file.
*/
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
// Required include files...
// ////////////////////////////////////////////////////////////////////////////

#include <boost/config.hpp>

#if defined(BOOST_CXX_VERSION) && (BOOST_CXX_VERSION >= 201703L)
# include <compare>
#endif // #if defined(BOOST_CXX_VERSION) && (BOOST_CXX_VERSION >= 201703L)

#ifndef _MSC_VER
# include <sys/time.h>
#elif (_MSC_VER < 1900)
# include <WinSock2.h>
#else
# pragma warning(push)
# pragma warning(disable:5039)
# include <WinSock2.h>
# pragma warning(pop)
#endif // #ifndef _MSC_VER

// ////////////////////////////////////////////////////////////////////////////

#if defined(BOOST_CXX_VERSION) && (BOOST_CXX_VERSION >= 201703L)
// ////////////////////////////////////////////////////////////////////////////
constexpr auto operator <=> (const timeval &lhs, const timeval &rhs)
{                    
	std::weak_ordering cmp = lhs.tv_sec <=> rhs.tv_sec;

   return((cmp != std::weak_ordering::equivalent) ? cmp :
		(lhs.tv_usec <=> rhs.tv_usec));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
constexpr bool operator == (const timeval &lhs, const timeval &rhs)
{
	return((lhs.tv_sec == rhs.tv_sec) && (lhs.tv_usec == rhs.tv_usec));
}   
// ////////////////////////////////////////////////////////////////////////////
#else
// ////////////////////////////////////////////////////////////////////////////
constexpr int Compare(const timeval &lhs, const timeval &rhs)
{
	return(
		((int) (lhs.tv_sec  > rhs.tv_sec)  ?  1 :
				((lhs.tv_sec  < rhs.tv_sec)  ? -1 :
				((lhs.tv_usec > rhs.tv_usec) ?  1 :
				((lhs.tv_usec < rhs.tv_usec) ? -1 : 0)))));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
constexpr bool operator <  (const timeval &lhs, const timeval &rhs)
{
	return(Compare(lhs, rhs) <  0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
constexpr bool operator >  (const timeval &lhs, const timeval &rhs)
{
	return(Compare(lhs, rhs) >  0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
constexpr bool operator <= (const timeval &lhs, const timeval &rhs)
{
	return(Compare(lhs, rhs) <= 0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
constexpr bool operator >= (const timeval &lhs, const timeval &rhs)
{
	return(Compare(lhs, rhs) >= 0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
constexpr bool operator == (const timeval &lhs, const timeval &rhs)
{
	return(Compare(lhs, rhs) == 0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
constexpr bool operator != (const timeval &lhs, const timeval &rhs)
{
	return(Compare(lhs, rhs) != 0);
}
// ////////////////////////////////////////////////////////////////////////////
#endif // #if defined(BOOST_CXX_VERSION) && (BOOST_CXX_VERSION >= 201703L)

#endif // #ifndef HH__MLB__Utility__Compare_timeval_hpp__HH

