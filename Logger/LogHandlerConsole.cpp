// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
// MLB Utility Library Module File
// ////////////////////////////////////////////////////////////////////////////
/*
   File Name         :  LogHandlerConsole.cpp

   File Description  :  Implementation of the log handler console class.

   Revision History  :  1993-10-02 --- Creation of predecessor 'mlog' facility.
                           Michael L. Brock
                        2005-01-02 --- New ostream-based log model.
                           Michael L. Brock
                        2023-02-27 --- Migration to C++ MlbDev2/Utility.
                           Michael L. Brock

      Copyright Michael L. Brock 1993 - 2023
      Distributed under the Boost Software License, Version 1.0.
      (See accompanying file LICENSE_1_0.txt or copy at
      http://www.boost.org/LICENSE_1_0.txt)

*/
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
// Required include files...
// ////////////////////////////////////////////////////////////////////////////

#include <Logger/LogHandlerConsole.hpp>

#include <iostream>

// ////////////////////////////////////////////////////////////////////////////

namespace MLB {

namespace Utility {

// ////////////////////////////////////////////////////////////////////////////
LogHandlerConsole::LogHandlerConsole()
	:LogHandler()
	,the_lock_()
	,iostreams_init_()
{
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
LogHandlerConsole::~LogHandlerConsole()
{
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
void LogHandlerConsole::InstallHandler()
{
	LogLockScoped my_lock(the_lock_);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
void LogHandlerConsole::RemoveHandler()
{
	LogLockScoped my_lock(the_lock_);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
void LogHandlerConsole::EmitLine(const LogEmitControl &emit_control)
{
	if (emit_control.ShouldLogScreen()) {
		LogLockScoped my_lock(the_lock_);
		emit_control.UpdateTime();
		std::cout.write(emit_control.GetLeaderPtr(),
			static_cast<std::streamsize>(emit_control.GetLeaderLength()));
		std::cout.write(emit_control.line_buffer_.c_str(),
			static_cast<std::streamsize>(emit_control.line_buffer_.size()));
		std::cout << std::endl;
	}
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
void LogHandlerConsole::EmitLiteral(unsigned int literal_length,
	const char *literal_string)
{
	LogLockScoped my_lock(the_lock_);

	std::cout.write(literal_string,
		static_cast<std::streamsize>(literal_length));
	std::cout << std::endl;
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
void LogHandlerConsole::EmitLiteral(const LogEmitControl &emit_control,
	unsigned int literal_length, const char *literal_string)
{
	if (emit_control.ShouldLogScreen())
		EmitLiteral(literal_length, literal_string);
}
// ////////////////////////////////////////////////////////////////////////////

} // namespace Utility

} // namespace MLB

